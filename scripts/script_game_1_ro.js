document.addEventListener('DOMContentLoaded', function() {
    const wordPool = document.getElementById('word-pool');
    const sentenceBuilder = document.getElementById('sentence-builder');
    const feedback = document.getElementById('feedback');
    const taskText = document.getElementById('task-text');
    const speakIcon = document.getElementById('speak-icon');
    const checkBtn = document.getElementById('check-btn');
    const retryBtn = document.getElementById('retry-btn');
    const nextBtn = document.getElementById('next-btn');
    const prevBtn = document.getElementById('prev-btn');
    const nextArrow = document.querySelector('.perehod a[href="/index/index_game_2 .html"]');


const sentences = [
    {
        task: "–Ø –µ–¥—É –Ω–∞ –∞–≤—Ç–æ–±—É—Å–µ (–∞–≤—Ç–æ–±—É—Å–æ–º).",
        words: ["ÎÇò", "Îäî", "ÏùÄ", "Î≤ÑÏä§", "Î°ú", "ÏúºÎ°ú", "Í∞ëÎãàÎã§."],
        correctOrder: ["ÎÇòÎäî", "Î≤ÑÏä§Î°ú", "Í∞ëÎãàÎã§."],
        combinations: [
            { parts: ["ÎÇò", "Îäî"], result: "ÎÇòÎäî" },
            { parts: ["Î≤ÑÏä§", "Î°ú"], result: "Î≤ÑÏä§Î°ú" }
           ]
    },
    {
        task: "–û–Ω —Ä–µ–∂–µ—Ç —Ö–ª–µ–± –Ω–æ–∂–æ–º.",
        words: ["Í∑∏", "Îäî", "ÏùÄ", "Î°ú", "ÏúºÎ°ú", "Ïπº",  "Îπµ", "ÏùÑ","Î•º", "ÏûêÎ¶ÖÎãàÎã§."],
        correctOrder: ["Í∑∏Îäî", "ÏπºÎ°ú", "Îπ†ÏùÑ", "ÏûêÎ¶ÖÎãàÎã§."],
        combinations: [
            { parts: ["Í∑∏", "Îäî"], result: "Í∑∏Îäî" },
            { parts: ["Ïπº", "Î°ú"], result: "ÏπºÎ°ú" },
            { parts: ["Îπµ", "ÏùÑ"], result: "ÎπµÏùÑ" }
           ]
    },
    {
        task: "–û–Ω –ª—é–±–∏—Ç –µ–µ –≤—Å–µ–º —Å–µ—Ä–¥—Ü–µ–º. (–¥—É—à–æ–π)",
        words: ["Í∑∏", "Îäî", "ÏùÄ", "Í∑∏ÎÖÄ", "ÏùÑ", "Î•º", "ÎßàÏùå", "ÏúºÎ°ú", "Î°ú",  "ÏÇ¨ÎûëÌï©ÎãàÎã§."],
        correctOrder: ["Í∑∏Îäî", "Í∑∏ÎÖÄÎ•º", "ÎßàÏùåÏúºÎ°ú",  "ÏÇ¨ÎûëÌï©ÎãàÎã§."],
        combinations: [
            { parts: ["Í∑∏", "Îäî"], result: "Í∑∏Îäî" },
            { parts: ["Í∑∏ÎÖÄ", "Î•º"], result: "Í∑∏ÎÖÄÎ•º" },
            { parts: ["ÎßàÏùå", "ÏúºÎ°ú"], result: "ÎßàÏùåÏúºÎ°ú" }
            ]
    },
    {
        task: "–î—Ä—É–≥ –µ–¥–µ—Ç –¥–æ–º–æ–π –Ω–∞ –º–µ—Ç—Ä–æ.",
        words: ["ÏπúÍµ¨", "Îäî", "ÏùÄ", "Ïßë", "Ïóê", "ÏóêÏÑú", "ÏßÄÌïòÏ≤†", "Î°ú", "ÏúºÎ°ú", "Í∞ëÎãàÎã§."],
        correctOrder: ["ÏπúÍµ¨Îäî", "ÏßëÏóê", "ÏßÄÌïòÏ≤†Î°ú", "Í∞ëÎãàÎã§."],
        combinations: [
            { parts: ["ÏπúÍµ¨", "Îäî"], result: "ÏπúÍµ¨Îäî" },
            { parts: ["ÏßÄÌïòÏ≤†", "Î°ú"], result: "ÏßÄÌïòÏ≤†Î°ú" },
            { parts: ["Ïßë", "Ïóê"], result: "ÏßëÏóê" }
        ]
    },
    {
        task: "–ú–∞–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Ä–∞—á–æ–º.",
        words: ["ÏóÑÎßà", "Îäî", "ÏùÄ", "ÏùòÏÇ¨", "Î°ú",  "ÏúºÎ°ú", "ÏùºÌï©ÎãàÎã§."],
        correctOrder: ["ÏóÑÎßàÎäî",  "ÏùòÏÇ¨Î°ú", "ÏùºÌï©ÎãàÎã§."],
        combinations: [
            { parts: ["ÏóÑÎßà", "Îäî"], result: "ÏóÑÎßàÎäî" },
            { parts: ["ÏùòÏÇ¨", "Î°ú"], result: "ÏùòÏÇ¨Î°ú" }
      ]
    },
    {
        task: "–Ø –ø–∏—à—É –∞–≤—Ç–æ—Ä—É—á–∫–æ–π.",
        words: ["ÎÇò", "Îäî", "ÏùÄ", "ÎßåÎÖÑÌïÑ", "Î°ú", "ÏúºÎ°ú", "ÏîÅÎãàÎã§."],
        correctOrder: ["ÎÇò", "Îäî", "ÎßåÎÖÑÌïÑÎ°ú", "ÏîÅÎãàÎã§."],
        combinations: [
            { parts: ["ÎÇò", "Îäî"], result: "Í∑∏Îäî" },
            { parts: ["ÎßåÎÖÑÌïÑ", "Î°ú"], result: "ÎßåÎÖÑÌïÑÎ°ú" }
        ]
    },
    {
        task: "–Ø –º–æ—é —Ä—É–∫–∏ –≤–æ–¥–æ–π.",
        words: ["ÎÇòÎäî", "Î°ú", "ÏúºÎ°ú", "ÏùÑ", "Î•º", "Î¨º", "ÏÜê", "ÏîªÏäµÎãàÎã§."],
        correctOrder: ["ÎÇòÎäî", "ÏÜêÏùÑ", "Î¨ºÎ°ú", "ÏîªÏäµÎãàÎã§."],
        combinations: [
            { parts: ["ÏÜê", "ÏùÑ"], result: "ÏÜêÏùÑ" },
            { parts: ["Î¨º", "Î°ú"], result: "Î¨ºÎ°ú" }
        ]
    }
];

let currentSentenceIndex = 0;
    let usedWords = [];
    let isAnswerCorrect = false;

    function loadSentence(index) {
        const sentence = sentences[index];
        taskText.textContent = sentence.task;
        wordPool.innerHTML = '';
        sentenceBuilder.innerHTML = '';
        sentenceBuilder.className = '';
        feedback.innerHTML = '';
        usedWords = [];
        checkBtn.style.display = 'inline-block';
        nextBtn.style.display = 'none';
        retryBtn.style.display = 'none';
        isAnswerCorrect = false;

        const shuffledWords = [...sentence.words].sort(() => Math.random() - 0.5);

        shuffledWords.forEach(word => {
            const wordElement = document.createElement('div');
            wordElement.className = 'word';
            wordElement.textContent = word;
            wordElement.dataset.word = word;
            wordElement.addEventListener('click', () => moveWord(wordElement));
            wordPool.appendChild(wordElement);
        });
    }

    function moveWord(word) {
        if (!usedWords.includes(word.dataset.word)) {
            const wordElement = document.createElement('div');
            wordElement.className = 'word';
            wordElement.textContent = word.textContent;
            wordElement.dataset.word = word.dataset.word;
            sentenceBuilder.appendChild(wordElement);
            usedWords.push(word.dataset.word);
        }
    }

    function checkOrder() {
        const currentWords = Array.from(sentenceBuilder.children).map(child => child.dataset.word);
        const correctOrder = sentences[currentSentenceIndex].correctOrder;
        
        const flatCorrectOrder = correctOrder.join('').replace(/\s+/g, '');
        const flatCurrentOrder = currentWords.join('').replace(/\s+/g, '');
        
        if (flatCurrentOrder === flatCorrectOrder) {
            combineWords();
            feedback.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!';
            nextBtn.style.display = 'inline-block';
            checkBtn.style.display = 'none';
            isAnswerCorrect = true;
        } else {
            feedback.innerHTML = 'üò¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
            retryBtn.style.display = 'inline-block';
            checkBtn.style.display = 'none';
            isAnswerCorrect = false;
        }
    }

    function combineWords() {
        const sentenceBuilderChildren = Array.from(sentenceBuilder.children);
        const combinations = sentences[currentSentenceIndex].combinations;
        const newSentenceBuilder = document.createElement('div');
        
        let i = 0;
        while (i < sentenceBuilderChildren.length) {
            let combined = false;
            
            for (const combo of combinations) {
                const comboLength = combo.parts.length;
                if (i + comboLength > sentenceBuilderChildren.length) continue;
                
                const currentSlice = sentenceBuilderChildren.slice(i, i + comboLength).map(el => el.dataset.word);
                
                if (arraysEqual(currentSlice, combo.parts)) {
                    const combinedWord = document.createElement('div');
                    combinedWord.className = 'word combined';
                    combinedWord.textContent = combo.result;
                    newSentenceBuilder.appendChild(combinedWord);
                    
                    i += comboLength;
                    combined = true;
                    break;
                }
            }
            
            if (!combined) {
                newSentenceBuilder.appendChild(sentenceBuilderChildren[i].cloneNode(true));
                i++;
            }
        }
        
        sentenceBuilder.innerHTML = '';
        sentenceBuilder.appendChild(newSentenceBuilder);
        sentenceBuilder.classList.add('combined');
        
        Array.from(sentenceBuilder.querySelectorAll('.word')).forEach(word => {
            word.style.width = 'auto';
            word.style.minWidth = 'fit-content';
        });
    }

    function arraysEqual(a, b) {
        if (a.length !== b.length) return false;
        for (let i = 0; i < a.length; i++) {
            if (a[i] !== b[i]) return false;
        }
        return true;
    }

    function resetGame() {
        loadSentence(currentSentenceIndex);
    }

    function nextSentence() {
        if (currentSentenceIndex < sentences.length - 1) {
            currentSentenceIndex++;
            resetGame();
        } else {
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            window.location.href = "/index/index_game_2 .html";
        }
    }

    function prevSentence() {
        if (currentSentenceIndex > 0) {
            currentSentenceIndex--;
            resetGame();
        } else {
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            window.location.href = "/index.html";
        }
    }

    speakIcon.addEventListener('click', function() {
        const sentence = sentences[currentSentenceIndex].correctOrder.join(' ');
        const utterance = new SpeechSynthesisUtterance(sentence);
        utterance.lang = 'ko-KR';
        utterance.rate = 0.8;
        speechSynthesis.speak(utterance);
    });

    checkBtn.addEventListener('click', checkOrder);
    retryBtn.addEventListener('click', resetGame);
    nextBtn.addEventListener('click', nextSentence);
    prevBtn.addEventListener('click', prevSentence);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç—Ä–µ–ª–∫–∏ –≤–ø—Ä–∞–≤–æ
    nextArrow.addEventListener('click', function(e) {
        if (!isAnswerCorrect) {
            e.preventDefault();
            alert('–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!');
        }
    });

    document.addEventListener('keydown', function(event) {
        if (event.key === 'Enter') {
            if (isAnswerCorrect) {
                nextSentence();
            } else {
                checkOrder();
            }
        }
    });

    loadSentence(currentSentenceIndex);
});
